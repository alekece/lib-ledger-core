MODE=$1
OS=$2
TARGET=$3
EXTRA=${@:4:${#@}}

function cmake_debug {
    if [ "$TARGET" == "ios" -o "$TARGET" == "android" ]; then
        echo -n "-DCMAKE_BUILD_TYPE:STRING=Debug"
    else
        echo -n "-DCMAKE_BUILD_TYPE=Debug"
    fi

    echo " -DBUILD_TESTS=ON -DPG_SUPPORT=ON -DPostgreSQL_INCLUDE_DIR=/usr/include/postgresql"
}

function cmake_release {
    if [ "$TARGET" == "ios" -o "$TARGET" == "android" ]; then
        echo -n "-DCMAKE_BUILD_TYPE:STRING=Release"
    else
        echo -n "-DCMAKE_BUILD_TYPE=Release"
    fi

    echo " -DBUILD_TESTS=OFF -PG_SUPPORT=OFF"
}

function cmake_jni {
    # Activate SSL only when using PG for WD
    echo "-DTARGET_JNI=ON -DPostgreSQL_INCLUDE_DIR=/usr/include/postgresql -DSSL_SUPPORT=ON"
}

function cmake_arch {
    if [ "$EXTRA" == "ssl_1_1" ]; then
        echo "-DCMAKE_PREFIX=$HOME -DSYS_OPENSSL=ON -DOPENSSL_USE_STATIC_LIBS=TRUE"
    fi
}

function cmake_ios {
    echo "-G 'Xcode' -DCMAKE_OSX_ARCHITECTURES:STRING=$EXTRA -DCMAKE_MACOSX_BUNDLE:BOOL=ON -DCMAKE_OSX_SYSROOT:STRING=$OSX_SYSROOT -DCMAKE_TOOLCHAIN_FILE=$POLLY_ROOT/$TOOLCHAIN_NAME.cmake"
}

function cmake_android {
    echo "-DTARGET_JNI=ON -DCMAKE_TOOLCHAIN_FILE=$POLLY_ROOT/$TOOLCHAIN_NAME.cmake"
}

function cmake_linux {
    if [ "$MODE" == "debug" ]; then
        echo "-DSYS_OPENSSL=ON -DOPENSSL_SSL_LIBRARIES=/usr/lib/x86_64-linux-gnu -DOPENSSL_INCLUDE_DIR=/usr/include/openssl"
    fi
}

function cmake_macos {
    if [ "$MODE" == "debug" ]; then
        echo "-DCMAKE_PREFIX_PATH=usr/local/Cellar/qt/$(ls /usr/local/Cellar/qt | grep 5.) -DPostgreSQL_TYPE_INCLUDE_DIR=/usr/include/postgresql"
    fi
}

echo "$(cmake_$MODE) $(cmake_$OS) $(type cmake_$TARGET > /dev/null && cmake_$TARGET)"