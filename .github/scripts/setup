OS=$1
MODE=$2
TARGET=$3
# Only available for android and ios targets
TARGET_ARCHITECTURE=$4

function setup_linux {
    sudo apt-get update
    sudo apt-get install -y libx11-xcb-dev
    sudo apt-get install -y sqlite3 sqlite libsqlite3-dev
    sudo apt-get install -y postgresql libpq-dev postgresql-server-dev-all

    echo "::set-env name=POSTGRESQL_INCLUDE::/usr/include/postgresql"

    if [ "$MODE" == "debug" ]; then
        sudo apt-get install -y qt5-default libqt5websockets5 libqt5websockets5-dev
    fi

    if [ "$TARGET" == "android" ]; then
        # This is useful for SQLCipher/config.guess
        echo "::set-env name=LIBC::gnu"

        # Set Android NDK variable
        echo "::set-env name=ANDROID_NDK_r18b::/home/circleci/android-ndk-r18b"
        echo "::set-env name=POLLY_ROOT::$(pwd)/toolchains/polly"

        if [ "$TARGET_ARCHITECTURE" == "armeabi-v7a" ]; then
            echo "::set-env name=TOOLCHAIN_NAME::android-ndk-r18b-api-21-armeabi-v7a-clang-libcxx"
        elif [ "$TARGET_ARCHITECTURE" == "arm64-v8a" ]; then
            echo "::set-env name=TOOLCHAIN_NAME::android-ndk-r18b-api-21-arm64-v8a-clang-libcxx"
        elif [ "$TARGET_ARCHITECTURE" == "x86_64" ]; then
            echo "::set-env name=TOOLCHAIN_NAME::android-ndk-r18b-api-21-x86-64-clang-libcxx"
        else
            echo "::set-env name=TOOLCHAIN_NAME::android-ndk-r18b-api-21-x86-clang-libcxx"
        fi
    fi
}

function setup_macos {
    brew install postgresql
    brew install sqlite
    brew install sbt

    echo "::set-env name=POSTGRESQL_INCLUDE::/usr/include/postgresql"

    if [ "$MODE" == "debug" ]; then
        brew install qt5

        # Get accurate qt5 version
        echo "::add-path::/usr/local/Cellar/qt/$(ls /usr/local/Cellar/qt | grep 5.)/bin"
    fi

    if [ "$TARGET" == "ios" ]; then
        echo "::set-env name=POLLY_ROOT::$(pwd)/toolchains/polly"
        echo "::set-env name=POLLY_IOS_BUNDLE_IDENTIFIER:::com.ledger.core"
        # Needed for nocodesign toolchains
        echo "::set-env name=XCODE_XCCONFIG_FILE::$(pwd)/toolchains/polly/scripts/NoCodeSign.xcconfig"

        if [ "$TARGET_ARCHITECTURE" == "armv7" ]; then
            echo "::set-env name=TOOLCHAIN_NAME::ios-nocodesign-11-2-dep-9-3-armv7"
            echo "::set-env name=OSX_SYSROOT::iphoneos"
            echo "::set-env name=OSX_ARCHITECTURES::armv7"
        elif [ "$TARGET_ARCHITECTURE" == "arm64" ]; then
            echo "::set-env name=TOOLCHAIN_NAME::ios-nocodesign-11-2-dep-9-3-arm64"
            echo "::set-env name=OSX_SYSROOT::iphoneos"
            echo "::set-env name=OSX_ARCHITECTURES::arm64"
        else
            echo "::set-env name=TOOLCHAIN_NAME::ios-nocodesign-11-2-dep-9-3"
            echo "::set-env name=OSX_SYSROOT::iphonesimulator"
            echo "::set-env name=OSX_ARCHITECTURES::x86_64"
            # Copy iphone.cmake which is not forcing CMAKE_OSX_SYSROOT to iphoneos in cache
            cp tools/build_ios/iphone.cmake toolchains/polly/os/
        fi

        cp tools/build_ios/framework.plist.in .
        cp tools/build_ios/install_name.sh .

        # Fixing NoCodeSign (see https://github.com/ruslo/polly/issues/302 for further details)
        sed -i '' '/CODE_SIGN_ENTITLEMENTS/d' toolchains/polly/scripts/NoCodeSign.xcconfig
    fi
}

function setup_windows {
    :
}

setup_$OS



