name: Continuous integration

on: [push, pull_request]

jobs:
  generate-ledger-core-bindings:
    name: Generate ledger-core bindings

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout submodules
        shell: bash
        run: git submodule update --init --recursive

      - name: Cache SBT ivy
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: sbt-ivy-${{ hashFiles('djinni/src/**') }}

      - name: Cache SBT
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: sbt-${{ hashFiles('djinni/src/**') }}

      - name: Cache generated API
        uses: actions/cache@v1
        with:
          path: ledger-core/inc/core/api
          key: ledger-core-api-${{ hashFiles('ledger-core/idl/**') }}

      - name: Cache generated JNI
        uses: actions/cache@v1
        with:
          path: ledger-core/inc/core/jni
          key: ledger-core-jni-${{ hashFiles('ledger-core/idl/**') }}

      - name: Cache IDL
        uses: actions/cache@v1
        with:
          path: ledger-core/idl
          key: ledger-core-idl-${{ hashFiles('ledger-core/idl/**') }}

      - name: Generate bindings
        if: failure()
        shell: bash
        run: tools/lc api

  generate-ledger-core-coin-bindings:
    name: Generate ledger-core-${{ matrix.coin }} bindings

    runs-on: ubuntu-latest
    needs: generate-ledger-core-bindings

    strategy:
      matrix:
        coin: [bitcoin, ethereum, ripple, tezos]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout submodules
        shell: bash
        run: git submodule update --init --recursive

      - name: Cache SBT ivy
        uses: actions/cache@v1
        with:
          path: ~/.ivy2/cache
          key: sbt-ivy-${{ hashFiles('djinni/src/**') }}

      - name: Cache SBT
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: sbt-${{ hashFiles('djinni/src/**') }}

      - name: Cache IDL
        uses: actions/cache@v1
        with:
          path: ledger-core/idl
          key: ledger-core-idl-${{ hashFiles('ledger-core/idl/**') }}

      - name: Cache generated API
        uses: actions/cache@v1
        with:
          path: ledger-core-${{ matrix.coin }}/inc/${{ matrix.coin }}/api
          key: ledger-core-${{ matrix.coin }}-api-${{ hashFiles(format('ledger-core-{0}/idl/**', matrix.coin)) }}

      - name: Generate bindings
        if: failure()
        shell: bash
        run: tools/lc project api ${{ matrix.coin }}

  build-ledger-core:
    name: Build ledger-core with ${{ matrix.target.runner }} runner for ${{ matrix.target.name }} target in release mode

    runs-on: ${{ matrix.target.runner }}
    needs: generate-ledger-core-bindings

    strategy:
      matrix:
        target: [
          { runner: ubuntu-latest, os: linux, name: linux},
          { runner: ubuntu-latest, os: linux, name: arch ssl_1_1},
          { runner: ubuntu-latest, os: linux, name: android },
          { runner: ubuntu-latest, os: linux, name: jni },
          { runner: ubuntu-latest, os: linux, name: android x86_64 },
          { runner: ubuntu-latest, os: linux, name: android armeabi-v7a },
          { runner: ubuntu-latest, os: linux, name: android arm64-v8a },
          { runner: macOS-latest, os: macos, name: macos},
          { runner: macOS-latest, os: macos, name: jni },
          { runner: macOS-latest, os: macos, name: ios },
          { runner: macOS-latest, os: macos, name: ios x86 },
          { runner: macOS-latest, os: macos, name: ios armv7 },
          { runner: macOS-latest, os: macos, name: ios arm64 }
        ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        shell: bash
        run: .github/scripts/setup ${{ runner.os }} ${{ matrix.mode }} ${{ matrix.target.name }}

      - name: Checkout submodules
        shell: bash
        run: git submodule update --init --recursive

      - name: Cache generated API
        uses: actions/cache@v1
        with:
          path: ledger-core/inc/core/api
          key: ledger-core-api-${{ hashFiles('ledger-core/idl/**') }}

      - name: Create build directory
        shell: bash
        run: mkdir -p ledger-core/build

      - name: Configure CMake
        shell: bash
        run: cmake -S ledger-core -B ledger-core/build $(.github/scripts/cmake ${{ env.parameters }}) -DCMAKE_INSTALL_PREFIX=install

      - name: Build library
        shell: bash
        working-directory: ledger-core/build
        run: .github/scripts/build ${{ env.parameters }}

      - name: Create install directory
        shell: bash
        run: mkdir -p install

      - name: Install library
        shell: bash
        run: cmake --install ledger-core/build

      - name: Compress install directory
        shell: bash
        run: zip -r install.zip install

      - name: Upload install.zip
        uses: actions/upload-artifact@v1
        with:
          name: ledger-core-${{ matrix.target.runner }}-release-${{ join(matrix.target.name, '-') }}-install
          path: install.zip

  # build-ledger-core-coin:
  #   name: Build ledger-core-${{ matrix.coin }} on ${{ matrix.os.alias }} in ${{ matrix.mode }} mode

  #   runs-on: ${{ matrix.os.name }}
  #   needs: [generate-ledger-core-coin-bindings, build-ledger-core]

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       coin: [bitcoin, ethereum, ripple, tezos]
  #       os: [
  #         { name: ubuntu-latest, alias: linux }
  #         # { name: macOS-latest, alias: macos, type: unix: cache: {sbt: ~/.sbt, ivy: ~/.ivy2/cache }}
  #         # { name: windows-latest, alias: windows }
  #       ]
  #       mode: [debug, release]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Install dependencies
  #       shell: bash
  #       run: .github/scripts/${{ matrix.os.alias }}_${{ matrix.mode }}_install_dependencies

  #     - name: Checkout submodules
  #       shell: bash
  #       run: git submodule update --init --recursive

  #     - name: Cache generated API
  #       uses: actions/cache@v1
  #       with:
  #         path: ledger-core-${{ matrix.coin }}/inc/${{ matrix.coin }}/api
  #         key: ledger-core-${{ matrix.coin }}-api-${{ hashFiles(format('ledger-core-{0}/idl/**', matrix.coin)) }}

  #     - name: Download install.zip
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: ledger-core-${{ matrix.os.alias }}-${{ matrix.mode}}-install
  #         path: .

  #     - name: Uncompress install.zip
  #       shell: bash
  #       run: unzip install.zip

  #     - name: Create build directory
  #       shell: bash
  #       run: mkdir -p ledger-core-${{ matrix.coin }}/build

  #     - name: Configure CMake
  #       shell: bash
  #       run: |
  #         cmake_parameters="$(.github/scripts/${{ matrix.os.alias }}_${{ matrix.mode }}_configure_cmake)"
  #         cmake -S ledger-core-${{ matrix.coin }} -B ledger-core-${{ matrix.coin }}/build $cmake_parameters

  #     - name: Build library
  #       shell: bash
  #       run: cmake --build ledger-core-${{ matrix.coin }}/build -j2

  #     # - name: Test library
  #     #   if: matrix.mode == 'debug'
  #     #   shell: bash
  #     #   working-directory: ledger-core-${{ matrix.coin }}/build
  #     #   run: ctest -VV -timeout 6
