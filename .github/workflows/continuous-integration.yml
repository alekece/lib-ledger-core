name: Continuous integration

on: [push, pull_request]

jobs:
    generate-ledger-core-bindings:
      name: Generate ledger-core bindings

      runs-on: ubuntu-latest

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Checkout submodules
          shell: bash
          run: git submodule update --init --recursive

        - name: Cache SBT ivy
          uses: actions/cache@v1
          with:
            path: ~/.ivy2/cache
            key: sbt-ivy-${{ hashFiles('djinni/src/**') }}
        - name: Cache SBT
          uses: actions/cache@v1
          with:
            path: ~/.sbt
            key: sbt-${{ hashFiles('djinni/src/**') }}

        - name: Cache generated API
          uses: actions/cache@v1
          with:
            path: ledger-core/inc/core/api
            key: ledger-core-api-${{ hashFiles('ledger-core/idl/**') }}
        - name: Cache generated JNI
          uses: actions/cache@v1
          with:
            path: ledger-core/inc/core/jni
            key: ledger-core-jni-${{ hashFiles('ledger-core/idl/**') }}

        - name: Generate bindings
          shell: bash
          run: tools/lc api

        - name: Upload core.yaml
          uses: actions/upload-artifact@v1
          with:
            name: ledger-core-bindings
            path: ledger-core/idl/core.yaml

    generate-ledger-core-coin-bindings:
      name: Generate ledger-core-${{ matrix.coin }} bindings

      runs-on: ubuntu-latest
      needs: generate-ledger-core-bindings
      strategy:
        matrix:
          coin: [bitcoin, ethereum, ripple, tezos]

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Checkout submodules
          shell: bash
          run: git submodule update --init --recursive

        - name: Cache SBT ivy
          uses: actions/cache@v1
          with:
            path: ~/.ivy2/cache
            key: sbt-ivy-${{ hashFiles('djinni/src/**') }}
        - name: Cache SBT
          uses: actions/cache@v1
          with:
            path: ~/.sbt
            key: sbt-${{ hashFiles('djinni/src/**') }}

        - name: Cache generated API
          uses: actions/cache@v1
          with:
            path: ledger-core-${{ matrix.coin }}/inc/${{ matrix.coin }}/api
            key: ledger-core-${{ matrix.coin }}-api-${{ hashFiles(format('ledger-core-{0}/idl/**', matrix.coin)) }}

        - name: Download core.yaml
          uses: actions/download-artifact@v1
          with:
            name: ledger-core-bindings
            path: ledger-core/idl

        - name: Generate bindings
          shell: bash
          run: tools/lc project api ${{ matrix.coin }}

    build-ledger-core:
      name: Build ledger-core on ${{ matrix.os.alias }} in ${{ matrix.mode }} mode

      runs-on: ${{ matrix.os.name }}
      needs: generate-ledger-core-bindings
      strategy:
        fail-fast: false
        matrix:
          os: [
            { name: ubuntu-latest, alias: linux }
            # { name: macOS-latest, alias: macos }
            # { name: windows-latest, alias: windows }
          ]
          mode: [debug, release]

      env:
        script-suffix: .github/scripts/${{ matrix.os.alias }}_${{ matrix.mode }}

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2

        - name: Install dependencies
          shell: bash
          run: ${{ env.script-suffix }}_install_dependencies

        - name: Checkout submodules
          shell: bash
          run: git submodule update --init --recursive

        - name: Cache generated API
          uses: actions/cache@v1
          with:
            path: ledger-core/inc/core/api
            key: ledger-core-api-${{ hashFiles('ledger-core/idl/**') }}

        - name: Create build directory
          shell: bash
          run: mkdir -p ledger-core/build

        - name: Configure CMake
          shell: bash
          run: cmake -S ledger-core -B ledger-core/build `${{ env.script-suffix }}_configure_cmake` -DCMAKE_INSTALL_PREFIX=install

        - name: Build library
          shell: bash
          run: cmake --build ledger-core/build -j2

        # - name: Test library
        #   if: matrix.mode == 'debug'
        #   shell: bash
        #   working-directory: ledger-core/build
        #   run: ctest

        - name: Create install directory
          shell: bash
          run: mkdir -p install

        - name: Install library
          shell: bash
          run: cmake --install ledger-core/build

        - name: Compress install directory
          shell: bash
          run: zip -r install
        - name: Upload install.zip
          uses: actions/upload-artifact@v1
          with:
            name: ledger-core-${{matrix.os.alias}}-${{ matrix.mode}}-install
            path: install.zip

    # build-ledger-core-coin:
    #   name: Build ledger-core-${{ matrix.coin.name }} on ${{ matrix.os.alias }} in ${{ matrix.mode }} mode
    #   strategy:
    #     fail-fast: false
    #     matrix:
    #       coin: [
    #         { name: bitcoin, cache: 'ledger-core-bitcoin/idl/**/*.djinni' },
    #         { name: ethereum, cache: 'ledger-core-ethereum/idl/**/*.djinni' },
    #         { name: ripple, cache: 'ledger-core-ripple/idl/**/*.djinni' },
    #         { name: tezos, cache: 'ledger-core-tezos/idl/**/*.djinni' }
    #       ]
    #       os: [
    #         { name: ubuntu-latest, alias: linux, type: unix, cache: { sbt: ~/.sbt, ivy: ~/.ivy2/cache }}
    #         # { name: macOS-latest, alias: macos, type: unix: cache: {sbt: ~/.sbt, ivy: ~/.ivy2/cache }}
    #         # { name: windows-latest, alias: windows }
    #       ]
    #       mode: [debug, release]
    #   runs-on: ${{ matrix.os.name }}
    #   needs: [generate-ledger-core-coin-bindings, build-ledger-core]
    #   env:
    #     coin: ledger-core-${{ matrix.coin.name }}
    #     script: .github/scripts/${{ matrix.os.alias }}/${{ matrix.mode }}
    #     command: .github/scripts/${{ matrix.os.type }}
    #   steps:
    #     - name: Checkout repository
    #       uses: actions/checkout@v2
    #     - name: Install dependencies
    #       shell: bash
    #       run: ${{ env.script }}/install_dependencies
    #     - name: Checkout submodules
    #       run: |
    #         git submodule init
    #         git submodule update --recursive
    #     - name: Cache ledger-core API
    #       uses: actions/cache@v1
    #       with:
    #         path: ledger-core/inc/core/api
    #         key: ledger-core-api-${{ hashFiles('ledger-core/idl/**/*.djinni') }}
    #     - name: Cache ${{ env.coin }} API
    #       uses: actions/cache@v1
    #       with:
    #         path: ${{ env.coin }}/inc/${{ matrix.coin.name }}/api
    #         key: ${{ env.coin }}-api-${{ hashFiles(matrix.coin.cache) }}
    #     - name: Download install.zip
    #       uses: actions/download-artifact@v1
    #       with:
    #         name: ledger-core-${{ matrix.os.alias }}-${{ matrix.os.mode}}-install
    #     - name: Uncompress install.zip
    #       shell: bash
    #       run: ${{ env.command }}/uncompress_file install.zip
    #     - name: Create build directory
    #       shell: bash
    #       run: ${{ env.script }}/create_directory ${{ env.coin }}/build
    #     - name: Configure CMake
    #       shell: bash
    #       run: ${{ env.script }}/configure_cmake ${{ env.coin }}
    #     - name: Build library
    #       shell: bash
    #       run: ${{ env.script }}/build_library ${{ env.coin }}
    #     # - name: Test library
    #     #   if: ${{ matrix.mode == 'debug' }}
    #     #   run: ${{ env.script }}/test_library ${{ env.coin }}
